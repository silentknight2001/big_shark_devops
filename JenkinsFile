pipeline {
    agent any
    tools{
        jdk 'jdk17'
        maven 'maven3'
    }
    environment{
        SCANNER_HOME= tool 'sonar-scanner'
    }

    stages {
        stage('git checkout') {
            steps {
                git branch: 'main', credentialsId: 'git-cred', url: 'https://github.com/silentknight2001/big_shark_devops.git'
            }
        }
         stage('compile') {
            steps {
                sh 'mvn compile'
            }
        }
         stage('Test') {
            steps {
                sh 'mvn test'
            }
        }
         stage('Scan file system with trivy') {
            steps {
                sh 'trivy fs --format table -o trivy-fs-report.html .'
            }
        }
         stage('SonerQueb Analyses') {
            steps {
                withSonarQubeEnv('sonar') {
                  sh ''' $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=big_shark_dev -Dsonar.projectKey=big_shark_dev \
                         -Dsonar.java.binaries=. '''
                 }
            }
        }
         stage('Quelity Gate with sonar') {
            steps {
                script{
                    waitForQualityGate abortPipeline: false, credentialsId: 'sonar-token'
                }
            }
        }
         stage('Build') {
            steps {
                sh 'mvn package'
            }
        }
         stage('Publish artifact to nexus repo') {
            steps {
                withMaven(globalMavenSettingsConfig: 'global-settings', jdk: 'jdk17', maven: 'maven3', mavenSettingsConfig: '', traceability: true) {
                   sh 'mvn deploy'
                  }
            }
        }
           stage('Build and tag Docker Image') {
            steps {
                script{
                    withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker', url: 'https://index.docker.io/v1/') {
                       sh 'docker build -t nayan2001/big_shark_app:latest .'
                  }
                }
            }
        }
           stage('Scan Docker image with Trivy') {
            steps {
                sh 'trivy image --format table trivy-image-report.html nayan2001/big_shark_app:latest'
            }
        }
        stage('Push Docker Image') {
            steps {
                script{
                    withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker', url: 'docker.io') {
                       sh 'docker push nayan2001/big_shark_app:latest'
                  }
                }
            }
        }
           stage('Deploy to kubernetes') {
            steps {
               withKubeConfig(caCertificate: '', clusterName: 'kubernetes', contextName: '', credentialsId: 'k8s-cred', namespace: 'webapps', restrictKubeConfigAccess: false, serverUrl: 'https://10.0.15.81:6443') {
                    sh 'kubectl apply -f deployment-service.yml'
              }
            }
        }
          stage('Veryfy the deployment') {
            steps {
               withKubeConfig(caCertificate: '', clusterName: 'kubernetes', contextName: '', credentialsId: 'k8s-cred', namespace: 'webapps', restrictKubeConfigAccess: false, serverUrl: 'https://10.0.15.81:6443') {
                    sh 'kubectl get pods -n webapps'
                    sh 'kubectl get svc -n webapps'
              }
            }
        }
    }
        post {
    always {
        script {
            def jobName = env.JOB_NAME
            def buildNumber = env.BUILD_NUMBER
            def pipelineStatus = currentBuild.result ?: 'UNKNOWN'
            def bannerColor = pipelineStatus.toUpperCase() == 'SUCCESS' ? 'green' : 'red'

            def body = """
                <html>
                <body>
                <div style="border: 4px solid ${bannerColor}; padding: 10px;">
                <h2>${jobName} - Build ${buildNumber}</h2>
                <div style="background-color: ${bannerColor}; padding: 10px;">
                <h3 style="color: white;">Pipeline Status: ${pipelineStatus.toUpperCase()}</h3>
                </div>
                <p>Check the <a href="${BUILD_URL}">console output</a>.</p>
                </div>
                </body>
                </html>
            """

            emailext (
                subject: "${jobName} - Build ${buildNumber} - ${pipelineStatus.toUpperCase()}",
                body: body,
                to: 'jshello695@gmail.com',
                from: 'jenkins@example.com',
                replyTo: 'jenkins@example.com',
                mimeType: 'text/html',
                attachmentsPattern: 'trivy-image-report.html'
            )
        }
    }
}
}
